<?php /** * Joomla! 1.5 component Qlue 404 * * @version $Id: controller.php 2010-11-30 12:52:08 svn $ * @author Aaron Harding - Qlue * @package Joomla * @subpackage Qlue 404 * @license GNU/GPL * * Qlue 404 will detect all the major errors usually found on a website (404, 500) errors. This extension will allow you to custom these custom error pages with ease while still maintaining the proper error codes for seo purposes.  * */// No direct accessdefined('_JEXEC') or die('Restricted Access');// Import joomla plugin libraryjimport( 'joomla.plugin.plugin' );jimport( 'joomla.html.html' );jimport( 'joomla.application.component.helper');jimport( 'joomla.document.document');// Create the class for the pluginclass plgSystemQlue404 extends JPlugin {		// Construction function	public function __construct(& $subject, $config) {		parent::__construct($subject, $config);				// Run this plugin when an error has been found		JError::setErrorHandling(E_ERROR, 'callback', array('plgSystemQlue404', 'handleError'));	}		public static function onAfterInitialise() {				// Get instance of JApplication		$mainframe =& JFactory::getApplication();				// Check to see that component is not in the admin section of the site		if($mainframe->isAdmin()) {			// Return false to not run the plugin			return false;		}				// Check to see if this is a qlue404 redirect from .htaccess file		$htaccess = JRequest::getInt('qlue404', 0);				// Get document Object		$document =& JFactory::getDocument();				// This is redirect from htaccess so force the websites format to html		if($htaccess == 1) {							// Force the format to be HTML			JRequest::setVar('format', 'html');						// Set the document type to html			$document->setType('html');			}			}		// function which handles the errors	public static function handleError(& $error) {						// Get JApplication object		$mainframe = JFactory::getApplication();					// Render custom error page in Administrator part of site		if($mainframe->isAdmin()){			// Render the error page.			JError::customErrorPage($error);						// Return false to not run the plugin			return false;		}				// Get instance of JDocument		$document =& JFactory::getDocument();				// Force to be html		$document->setType('html');				// Set the Error status before any content is output to screen		JResponse::setHeader('status', $error->get('code').' '.str_replace( "\n", ' ', $error->get('message') ));				// Lets load joomla default javascript libraries if not already loaded		JHTML::_('behavior.mootools');		JHTML::_('behavior.caption');				// First get the mainframe scope		$scope = $mainframe->scope;				// Change the scope to our component		$mainframe->scope = 'com_qlue404';				// Create path to our component		$path = JPATH_BASE.DS.'components'.DS.'com_qlue404'.DS.'qlue404.php';				// Render our component		$contents = plgSystemQlue404::_renderComponent($path, $error);				// Revert the scope back to original		$mainframe->scope = $scope;				// Set the document buffer		$document->setBuffer($contents, 'component');				// Get the template		$template = $mainframe->getTemplate();				// Set params for the template to load		$params = array(			'template' 	=> $template->template,			'file'		=> 'index.php',			'directory'	=> JPATH_THEMES,			'params'    => $template->params		);				// Render the template		$data = $document->render($mainframe->getCfg('caching'), $params );				// Set the new body data		JResponse::setBody($data);				// Display the new layout		echo JResponse::toString();				// Close gracefully		$mainframe->close(0);	}		private static function _renderComponent( $path, $error = array()) {				// Get JApplication object		$mainframe = JFactory::getApplication();				// If component disabled throw error		if (!JComponentHelper::isEnabled( 'com_qlue404' ) || !file_exists($path)) {						// Use standard joomla error page as my component not turned on			JError::customErrorPage($error);		}				// Get the task incase it changed again		$task = JRequest::getString( 'task' );				// Load common language files		$lang =& JFactory::getLanguage();		$lang->load('com_qlue404');		// Set contents to null		$contents = null;				// Execute the component and get the contents		ob_start();		require_once($path);		$contents = ob_get_contents();		ob_end_clean();				// Return the component contents		return $contents;	}}